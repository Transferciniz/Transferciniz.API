// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Transferciniz.API;

#nullable disable

namespace Transferciniz.API.Migrations
{
    [DbContext(typeof(TransportationContext))]
    [Migration("20240822193646_new_models")]
    partial class new_models
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Transferciniz.API.Entities.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CompanyType")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TaxNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Transferciniz.API.Entities.CompanyFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<byte[]>("File")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int>("FileCategory")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyFiles");
                });

            modelBuilder.Entity("Transferciniz.API.Entities.CompanyVehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.ToTable("CompanyVehicles");
                });

            modelBuilder.Entity("Transferciniz.API.Entities.ExtraService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("ExtraServices");
                });

            modelBuilder.Entity("Transferciniz.API.Entities.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastActivity")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("Transferciniz.API.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("ProviderTransactionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TripId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Transferciniz.API.Entities.Trip", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ChildCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("CompanyVehicleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Fee")
                        .HasColumnType("numeric");

                    b.Property<int>("HandicapedPersonCount")
                        .HasColumnType("integer");

                    b.Property<int>("PersonCount")
                        .HasColumnType("integer");

                    b.Property<string>("RouteJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalExtraServiceCost")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalTripCost")
                        .HasColumnType("numeric");

                    b.Property<Guid>("TripHeaderId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TripHeaderId");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("Transferciniz.API.Entities.TripExtraService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ExtraServiceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TripId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TripId");

                    b.ToTable("TripExtraServices");
                });

            modelBuilder.Entity("Transferciniz.API.Entities.TripHeader", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Fee")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalExtraServiceCost")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalTripCost")
                        .HasColumnType("numeric");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TransactionId");

                    b.ToTable("TripHeaders");
                });

            modelBuilder.Entity("Transferciniz.API.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Transferciniz.API.Entities.UserDevice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ApplicationVersion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DeviceInfo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserDevices");
                });

            modelBuilder.Entity("Transferciniz.API.Entities.UserFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte[]>("File")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int>("FileCategory")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserFiles");
                });

            modelBuilder.Entity("Transferciniz.API.Entities.UserLocation", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Geometry>("Location")
                        .IsRequired()
                        .HasColumnType("geometry");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId1")
                        .HasColumnType("uuid");

                    b.HasKey("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("UserLocations");
                });

            modelBuilder.Entity("Transferciniz.API.Entities.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VehicleBrandId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VehicleModelId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("VehicleBrandId");

                    b.HasIndex("VehicleModelId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("Transferciniz.API.Entities.VehicleBrand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("VehicleBrands");
                });

            modelBuilder.Entity("Transferciniz.API.Entities.VehicleExtraService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CompanyVehicleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ExtraServiceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyVehicleId");

                    b.HasIndex("ExtraServiceId");

                    b.ToTable("VehicleExtraServices");
                });

            modelBuilder.Entity("Transferciniz.API.Entities.VehicleFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CompanyVehicleId")
                        .HasColumnType("uuid");

                    b.Property<byte[]>("File")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int>("FileCategory")
                        .HasColumnType("integer");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyVehicleId");

                    b.ToTable("VehicleFiles");
                });

            modelBuilder.Entity("Transferciniz.API.Entities.VehicleLocation", b =>
                {
                    b.Property<Guid>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Geometry>("Location")
                        .IsRequired()
                        .HasColumnType("geometry");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("VehicleId1")
                        .HasColumnType("uuid");

                    b.HasKey("VehicleId");

                    b.HasIndex("VehicleId1");

                    b.ToTable("VehicleLocations");
                });

            modelBuilder.Entity("Transferciniz.API.Entities.VehicleModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<int>("ExtraCapacity")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("VehicleBrandId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VehicleBrandId");

                    b.ToTable("VehicleModels");
                });

            modelBuilder.Entity("Transferciniz.API.Entities.VehicleSegment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("VehicleSegments");
                });

            modelBuilder.Entity("Transferciniz.API.Entities.VehicleSegmentFilter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CompanyVehicleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VehicleSegmentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyVehicleId");

                    b.HasIndex("VehicleSegmentId");

                    b.ToTable("VehicleSegmentFilters");
                });

            modelBuilder.Entity("Transferciniz.API.Entities.VehicleType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("VehicleTypes");
                });

            modelBuilder.Entity("Transferciniz.API.Entities.VehicleTypeFilter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CompanyVehicleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VehicleTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyVehicleId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("VehicleTypeFilters");
                });

            modelBuilder.Entity("Transferciniz.API.Entities.CompanyFile", b =>
                {
                    b.HasOne("Transferciniz.API.Entities.Company", null)
                        .WithMany("CompanyFiles")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Transferciniz.API.Entities.CompanyVehicle", b =>
                {
                    b.HasOne("Transferciniz.API.Entities.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Transferciniz.API.Entities.Session", b =>
                {
                    b.HasOne("Transferciniz.API.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Transferciniz.API.Entities.Trip", b =>
                {
                    b.HasOne("Transferciniz.API.Entities.TripHeader", null)
                        .WithMany("Trips")
                        .HasForeignKey("TripHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Transferciniz.API.Entities.TripExtraService", b =>
                {
                    b.HasOne("Transferciniz.API.Entities.Trip", null)
                        .WithMany("TripExtraServices")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Transferciniz.API.Entities.TripHeader", b =>
                {
                    b.HasOne("Transferciniz.API.Entities.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Transferciniz.API.Entities.User", b =>
                {
                    b.HasOne("Transferciniz.API.Entities.Company", null)
                        .WithMany("Users")
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("Transferciniz.API.Entities.UserDevice", b =>
                {
                    b.HasOne("Transferciniz.API.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Transferciniz.API.Entities.UserFile", b =>
                {
                    b.HasOne("Transferciniz.API.Entities.User", null)
                        .WithMany("UserFiles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Transferciniz.API.Entities.UserLocation", b =>
                {
                    b.HasOne("Transferciniz.API.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Transferciniz.API.Entities.Vehicle", b =>
                {
                    b.HasOne("Transferciniz.API.Entities.Company", null)
                        .WithMany("Vehicles")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Transferciniz.API.Entities.VehicleBrand", "VehicleBrand")
                        .WithMany()
                        .HasForeignKey("VehicleBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Transferciniz.API.Entities.VehicleModel", "VehicleModel")
                        .WithMany()
                        .HasForeignKey("VehicleModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleBrand");

                    b.Navigation("VehicleModel");
                });

            modelBuilder.Entity("Transferciniz.API.Entities.VehicleExtraService", b =>
                {
                    b.HasOne("Transferciniz.API.Entities.CompanyVehicle", null)
                        .WithMany("VehicleExtraServices")
                        .HasForeignKey("CompanyVehicleId");

                    b.HasOne("Transferciniz.API.Entities.ExtraService", "ExtraService")
                        .WithMany()
                        .HasForeignKey("ExtraServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExtraService");
                });

            modelBuilder.Entity("Transferciniz.API.Entities.VehicleFile", b =>
                {
                    b.HasOne("Transferciniz.API.Entities.CompanyVehicle", null)
                        .WithMany("VehicleFiles")
                        .HasForeignKey("CompanyVehicleId");
                });

            modelBuilder.Entity("Transferciniz.API.Entities.VehicleLocation", b =>
                {
                    b.HasOne("Transferciniz.API.Entities.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Transferciniz.API.Entities.VehicleModel", b =>
                {
                    b.HasOne("Transferciniz.API.Entities.VehicleBrand", null)
                        .WithMany("VehicleModels")
                        .HasForeignKey("VehicleBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Transferciniz.API.Entities.VehicleSegmentFilter", b =>
                {
                    b.HasOne("Transferciniz.API.Entities.CompanyVehicle", null)
                        .WithMany("VehicleSegmentFilters")
                        .HasForeignKey("CompanyVehicleId");

                    b.HasOne("Transferciniz.API.Entities.VehicleSegment", "VehicleSegment")
                        .WithMany()
                        .HasForeignKey("VehicleSegmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleSegment");
                });

            modelBuilder.Entity("Transferciniz.API.Entities.VehicleTypeFilter", b =>
                {
                    b.HasOne("Transferciniz.API.Entities.CompanyVehicle", null)
                        .WithMany("VehicleTypeFilters")
                        .HasForeignKey("CompanyVehicleId");

                    b.HasOne("Transferciniz.API.Entities.VehicleType", "VehicleType")
                        .WithMany()
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("Transferciniz.API.Entities.Company", b =>
                {
                    b.Navigation("CompanyFiles");

                    b.Navigation("Users");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Transferciniz.API.Entities.CompanyVehicle", b =>
                {
                    b.Navigation("VehicleExtraServices");

                    b.Navigation("VehicleFiles");

                    b.Navigation("VehicleSegmentFilters");

                    b.Navigation("VehicleTypeFilters");
                });

            modelBuilder.Entity("Transferciniz.API.Entities.Trip", b =>
                {
                    b.Navigation("TripExtraServices");
                });

            modelBuilder.Entity("Transferciniz.API.Entities.TripHeader", b =>
                {
                    b.Navigation("Trips");
                });

            modelBuilder.Entity("Transferciniz.API.Entities.User", b =>
                {
                    b.Navigation("UserFiles");
                });

            modelBuilder.Entity("Transferciniz.API.Entities.VehicleBrand", b =>
                {
                    b.Navigation("VehicleModels");
                });
#pragma warning restore 612, 618
        }
    }
}
